/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.manufacturerRole;

import business.Order;
import business.OrderItem;
import business.enterprise.Enterprise;
import business.enterprise.Vaccine;
import business.organization.DistributorOrganization;
import business.organization.ManufacturerOrganization;
import business.organization.Organization;
import business.organization.WarehouseOrganization;
import business.userAccount.UserAccount;
import business.workQueue.OrderRequest;
import business.workQueue.PaymentRequest;
import business.workQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Smeet
 */
public class ViewManfacturerOrdersJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewManfacturerOrdersJPanel
     */
    JPanel userProcessContainer;
    UserAccount userAccount;
    ManufacturerOrganization organization;
    Enterprise enterprise;
    OrderRequest or;

    public ViewManfacturerOrdersJPanel(JPanel upc, ManufacturerOrganization o, UserAccount ua, Enterprise e) {
        initComponents();
        this.userProcessContainer = upc;
        this.userAccount = ua;
        this.organization = o;
        this.enterprise = e;
        populateTable();

        populateInvoiceTable();

    }

    private void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) orderJTable.getModel();
        dtm.setRowCount(0);
        //System.out.println(organization.getName());
        for (WorkRequest wr : organization.getWorkQueue().getWorkRequestList()) {
            // System.out.println(organization.getName());
            if (wr instanceof OrderRequest) {

                OrderRequest or = (OrderRequest) wr;
                Object row[] = new Object[5];
                for (OrderItem oi : or.getOrder().getOrderItemList()) {
                    row[0] = or;
                    row[1] = or.getStatus();
                    row[2] = oi.getVaccine().getVacName();
                    row[3] = oi.getQuantity();
                    row[4] = or.getSender();
                    dtm.addRow(row);
                }
            }
        }

    }

    private void populateInvoiceTable() {

        DefaultTableModel dtm = (DefaultTableModel) paymentJTable.getModel();
        dtm.setRowCount(0);

        for (WorkRequest wr : userAccount.getWorkQueue().getWorkRequestList()) {

            if (wr instanceof OrderRequest) {

                OrderRequest or = (OrderRequest) wr;
                Object row[] = new Object[6];
                for (OrderItem oi : or.getOrder().getOrderItemList()) {
                    row[0] = or;
                    row[1] = or.getOrder().getOrderId();
                    row[2] = or.getPaymentStatus();
                    row[3] = oi.getQuantity();
                    row[4] = or.getSender();
                    row[5] = oi.getVaccine().getVacName();
                    dtm.addRow(row);
                }
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderJTable = new javax.swing.JTable();
        ShipJButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        generateBillJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        paymentJTable = new javax.swing.JTable();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("     View Orders");

        orderJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Date", "Status", "Vaccine Name", "Required Quantity", "Sender"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(orderJTable);

        ShipJButton.setText("Ship");
        ShipJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShipJButtonActionPerformed(evt);
            }
        });

        jButton2.setText("<<Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        generateBillJButton.setText("View");
        generateBillJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateBillJButtonActionPerformed(evt);
            }
        });

        paymentJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Date", "Order Id", "Payment Status", "Sender", "Vaccine Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(paymentJTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 639, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(338, 338, 338)
                        .addComponent(ShipJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(127, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(337, 337, 337)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(325, 325, 325)
                        .addComponent(generateBillJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(ShipJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(generateBillJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(81, 81, 81))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ShipJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShipJButtonActionPerformed
        // TODO add your handling code here:

        int quantity = 0;
        OrderRequest or;

        // or.setStatus("Sent");
        // rs.getcOrg();
        int selectedRow = orderJTable.getSelectedRow();

        if (selectedRow >= 0) {

            or = (OrderRequest) orderJTable.getValueAt(selectedRow, 0);
            //   or.setStatus("Shipped");
            //or.setQuantity();
            Vaccine v = null;
            for (OrderItem oi : or.getOrder().getOrderItemList()) {
                or.setQuantity(oi.getQuantity());
                v = oi.getVaccine();

            }

            //  System.out.println(or.getQuantity());
            or.setSender(userAccount);
            Organization oo = null;
            Boolean flag = true;

            for (Organization o1 : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (o1 instanceof DistributorOrganization) {

                    for (Organization o2 : o1.getOrganizationDirectory().getOrganizationList()) {
                        if (o2 instanceof WarehouseOrganization) {

                            if (o2.equals(or.getOrganization())) {
                                oo = o2;

                                or.setStatus("Shipped");
                                //  or.setPaymentStatus("Pending");

                                flag = false;
                                break;
                            }

                        }
                    }
                    if (!flag) {
                        break;
                    }
                }
            }

            oo.getCatalog().addInventoryItem(or.getQuantity(), v);

            if (oo != null) {

                oo.getWorkQueue().getWorkRequestList().add(or);

                userAccount.getWorkQueue().getWorkRequestList().add(or);
                populateTable();
            }

            Organization foundOrg = null;
            for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (org instanceof DistributorOrganization) {
                    foundOrg = org;
                    break;
                }
            }

            if (foundOrg != null) {
                foundOrg.getWorkQueue().getWorkRequestList().add(or);
               // userAccount.getWorkQueue().getWorkRequestList().add(or);
            }
        }
    }//GEN-LAST:event_ShipJButtonActionPerformed

    private void generateBillJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateBillJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = paymentJTable.getSelectedRow();
        or = (OrderRequest) paymentJTable.getValueAt(selectedRow, 0);

        
            or.setPaymentStatus("Pending");

            Organization foundOrg = null;
            for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (org instanceof DistributorOrganization) {
                    foundOrg = org;
                    break;
                }
            }

            if (foundOrg != null) {
                foundOrg.getWorkQueue().getWorkRequestList().add(or);
               // userAccount.getWorkQueue().getWorkRequestList().add(or);
                
            }
        


    }//GEN-LAST:event_generateBillJButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ShipJButton;
    private javax.swing.JButton generateBillJButton;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderJTable;
    private javax.swing.JTable paymentJTable;
    // End of variables declaration//GEN-END:variables
}
