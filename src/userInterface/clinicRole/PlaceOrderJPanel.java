/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.clinicRole;

import business.MasterOrderCatalog;
import business.Order;
import business.OrderItem;
import business.enterprise.Enterprise;
import business.enterprise.PhdEnterprise;
import business.enterprise.Vaccine;
import business.organization.ClinicOrganization;
import business.organization.ManufacturerOrganization;
import business.organization.Organization;
import business.userAccount.UserAccount;
import business.workQueue.VaccineRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Smeet
 */
public class PlaceOrderJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PlaceOrderJPanel
     */
    JPanel userProcessContainer;
    UserAccount userAccount;
    Organization parentOrg;
    Order order;
    Enterprise enterprise;
    ClinicOrganization org;
    private boolean flag = true;
  //  MasterOrderCatalog masterOrderCatalog;

    public PlaceOrderJPanel(JPanel upc, UserAccount ua,ClinicOrganization org ,Enterprise e,Organization parentOrg) {
        initComponents();
        this.userProcessContainer = upc;
        this.userAccount = ua;
        this.parentOrg = parentOrg;
        this.enterprise = e;
        this.org = org;
      //masterOrderCatalog = enterprise.getMoc();
       // System.out.println(parentEnt.getName());
        populateVaccineTable();
    }

    public void populateVaccineTable() {
        DefaultTableModel dtm = (DefaultTableModel) productDetailsJTable.getModel();
        dtm.setRowCount(0);

        ManufacturerOrganization mo = null;
        for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (o instanceof ManufacturerOrganization) {
                mo = (ManufacturerOrganization) o;

                for (Vaccine v : mo.getVaccineCatalog().getVaccineList()) {
                    Object row[] = new Object[5];
                    row[0] = v;
                    row[1] = v.getVacId();
                    row[2] = v.getPrice();
                   // row[3] = v.getCategory();
                    row[3] = v.getDate();
                    row[4] = v.getQuantity();
                    dtm.addRow(row);
                }
            }
        }
    }

    private void populateOrderTable(Order order) {
        DefaultTableModel dtm = (DefaultTableModel) orderItemJTable.getModel();
        dtm.setRowCount(0);

        for (OrderItem oi : order.getOrderItemList()) {
            Object[] obj = new Object[4];
            obj[0] = oi;
            obj[1] = oi.getVaccine().getPrice();
            obj[2] = oi.getQuantity();
            obj[3] = oi.getQuantity() * oi.getVaccine().getPrice();
            dtm.addRow(obj);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        productDetailsJTable = new javax.swing.JTable();
        viewProductDetailsJButton = new javax.swing.JButton();
        quantityJLabel = new javax.swing.JLabel();
        quantityJSpinner = new javax.swing.JSpinner();
        AddToCartJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderItemJTable = new javax.swing.JTable();
        shoppingCartJLabel = new javax.swing.JLabel();
        viewOrderItemDetailsJButton = new javax.swing.JButton();
        modifyQuantityJTextField = new javax.swing.JTextField();
        modifyQuantityJButton = new javax.swing.JButton();
        RemoveItemButton = new javax.swing.JButton();
        checkoutJButton1 = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("   Place Order");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.ipadx = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(45, 61, 0, 0);
        add(jLabel1, gridBagConstraints);

        productDetailsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vaccine Name", "Order Id", "Vaccine Price", "Order Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productDetailsJTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 19;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 736;
        gridBagConstraints.ipady = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(54, 32, 0, 48);
        add(jScrollPane1, gridBagConstraints);

        viewProductDetailsJButton.setText("View Product Details");
        viewProductDetailsJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewProductDetailsJButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(47, 80, 0, 0);
        add(viewProductDetailsJButton, gridBagConstraints);

        quantityJLabel.setText("   Quantity");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 26;
        gridBagConstraints.ipady = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(47, 61, 0, 0);
        add(quantityJLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(48, 5, 0, 0);
        add(quantityJSpinner, gridBagConstraints);

        AddToCartJButton.setText("ADD TO CART");
        AddToCartJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddToCartJButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 28;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(47, 24, 0, 0);
        add(AddToCartJButton, gridBagConstraints);

        orderItemJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Price", "Quantity", "Total Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderItemJTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 18;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 671;
        gridBagConstraints.ipady = 70;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(18, 67, 0, 0);
        add(jScrollPane2, gridBagConstraints);

        shoppingCartJLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        shoppingCartJLabel.setText("SHOPPING CART ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(42, 32, 0, 0);
        add(shoppingCartJLabel, gridBagConstraints);

        viewOrderItemDetailsJButton.setText("View Order Item Details");
        viewOrderItemDetailsJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewOrderItemDetailsJButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.ipadx = 14;
        gridBagConstraints.ipady = 19;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(28, 67, 0, 0);
        add(viewOrderItemDetailsJButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 142;
        gridBagConstraints.ipady = 22;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(28, 30, 0, 0);
        add(modifyQuantityJTextField, gridBagConstraints);

        modifyQuantityJButton.setText("Modify Quantity");
        modifyQuantityJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyQuantityJButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.ipadx = 16;
        gridBagConstraints.ipady = 19;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(28, 11, 0, 0);
        add(modifyQuantityJButton, gridBagConstraints);

        RemoveItemButton.setText("Remove Item");
        RemoveItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveItemButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 14;
        gridBagConstraints.ipady = 19;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(28, 44, 0, 0);
        add(RemoveItemButton, gridBagConstraints);

        checkoutJButton1.setText("CHECKOUT");
        checkoutJButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutJButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.ipadx = 65;
        gridBagConstraints.ipady = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(61, 142, 0, 0);
        add(checkoutJButton1, gridBagConstraints);

        backJButton.setText("<<Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 123, 90, 0);
        add(backJButton, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void viewProductDetailsJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewProductDetailsJButtonActionPerformed
        // TODO add your handling code here:
        int selectRow = productDetailsJTable.getSelectedRow();
        if (selectRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }

        Vaccine v = (Vaccine) productDetailsJTable.getValueAt(selectRow, 0);

        ViewPVaccineDetailsJPanel vvdjp = new ViewPVaccineDetailsJPanel(userProcessContainer,v);
        userProcessContainer.add("ViewVaccineDetailsJPanel", vvdjp);
        CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
        cardLayout.next(userProcessContainer);
    }//GEN-LAST:event_viewProductDetailsJButtonActionPerformed

    private void AddToCartJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddToCartJButtonActionPerformed
        // TODO add your handling code here:
        int selectRow = productDetailsJTable.getSelectedRow();
        boolean flag = true;
        if (selectRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }

        Vaccine v = (Vaccine) productDetailsJTable.getValueAt(selectRow, 0);
        int quantity = (Integer) quantityJSpinner.getValue();
        if (quantity < 0) {
            JOptionPane.showMessageDialog(null, "Please enter correct quantity");
            return;
        }
        if (order == null) {
            order = new Order();
        } else {

            ArrayList<OrderItem> oi = order.getOrderItemList();
            for (OrderItem orderItem : oi) {
                if (orderItem.getVaccine().equals(v)) {
                    int oldQuantity = orderItem.getQuantity();
                    int newQuantity = oldQuantity + quantity;
                    orderItem.setQuantity(newQuantity);
                    flag = false;
                }

            }
        }

        if (flag == true) {
            OrderItem oi = order.addOrderItem(v, quantity);
        }

       

        v.setQuantity(v.getQuantity() - quantity);
        JOptionPane.showMessageDialog(null, v.getVacName() + " "
                + "Quantity" + quantity + "is added to cart");
        populateVaccineTable();
        populateOrderTable(order);
    }//GEN-LAST:event_AddToCartJButtonActionPerformed

    private void viewOrderItemDetailsJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewOrderItemDetailsJButtonActionPerformed
        // TODO add your handling code here:

        int selectedRow = orderItemJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }
        OrderItem oi = (OrderItem) orderItemJTable.getValueAt(selectedRow, 0);

        ViewOrderItemJPanel voijp = new ViewOrderItemJPanel(userProcessContainer, oi);
        userProcessContainer.add("ViewOrderItemDetailsJPanel", voijp);
        CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
        cardLayout.next(userProcessContainer);
    }//GEN-LAST:event_viewOrderItemDetailsJButtonActionPerformed

    private void modifyQuantityJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyQuantityJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = orderItemJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Select a row");
            return;

        }

        OrderItem oi = (OrderItem) orderItemJTable.getValueAt(selectedRow, 0);

        int modifyQuantity = Integer.parseInt(modifyQuantityJTextField.getText());

        if (modifyQuantity > (oi.getQuantity())+ oi.getVaccine().getQuantity()) {
            JOptionPane.showMessageDialog(null, "Quantity is wrong");
            return;
        }

        if (modifyQuantity <= 0) {
            JOptionPane.showMessageDialog(null, "Quanitity is not appropriate");
            return;
        }

        int oldQuantity = oi.getQuantity();
        int oldAvailability = oi.getVaccine().getQuantity();
         oi.getVaccine().setQuantity(oldQuantity + oldAvailability - modifyQuantity);
         oi.setQuantity(modifyQuantity);

        populateVaccineTable();
        populateOrderTable(order);
    }//GEN-LAST:event_modifyQuantityJButtonActionPerformed

    private void RemoveItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveItemButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = orderItemJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
        }

        OrderItem oi = (OrderItem) orderItemJTable.getValueAt(selectedRow, 0);
        order.deleteOrderItem(oi);

        int newAvailability = oi.getQuantity() + oi.getVaccine().getQuantity();

        oi.getVaccine().setQuantity(newAvailability);
        populateVaccineTable();
        populateOrderTable(order);
    }//GEN-LAST:event_RemoveItemButtonActionPerformed

    private void checkoutJButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutJButton1ActionPerformed
        // TODO add your handling code here:
        
        VaccineRequest vr = new VaccineRequest();

        vr.setSender(userAccount);
        vr.setStatus("Pending");
        order.setStatus("Pending");
        vr.setOrder(order);
        vr.setcOrg(org);
        
        
        

        // Organization foundOrg = null;
        
        //if (foundOrg != null) {
        parentOrg.getWorkQueue().getWorkRequestList().add(vr);
        //System.out.println(vr);
        userAccount.getWorkQueue().getWorkRequestList().add(vr);
            //Order order = new Order();

//         Order addedOrder = masterOrderCatalog.addOrder(order);
//        for(Organization org : parentOrg.getOrganizationDirectory().getOrganizationList()){
//            for(Organization o : org.getOrganizationDirectory().getOrganizationList()){
//                ClinicOrganization co = null;
//                if(o instanceof ClinicOrganization)
//                    o = (ClinicOrganization) co;
//                
//            }
//        }
        if (order != null) {
            order = new Order();
            JOptionPane.showMessageDialog(null, "The order is been checked out: Thanks!!");
        } else {
            JOptionPane.showMessageDialog(null, "The cart is empty");
            return;
        }
        flag = false;
        populateVaccineTable();
        populateOrderTable(order);
    }//GEN-LAST:event_checkoutJButton1ActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:

        if (order == null) {
            userProcessContainer.remove(this);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.previous(userProcessContainer);
            return;
        }

        for (OrderItem oi : order.getOrderItemList()) {
            oi.getVaccine().setAvailability(oi.getQuantity() + oi.getVaccine().getAvailability());
        }
         order.deleteOrderItem(null);

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddToCartJButton;
    private javax.swing.JButton RemoveItemButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton checkoutJButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton modifyQuantityJButton;
    private javax.swing.JTextField modifyQuantityJTextField;
    private javax.swing.JTable orderItemJTable;
    private javax.swing.JTable productDetailsJTable;
    private javax.swing.JLabel quantityJLabel;
    private javax.swing.JSpinner quantityJSpinner;
    private javax.swing.JLabel shoppingCartJLabel;
    private javax.swing.JButton viewOrderItemDetailsJButton;
    private javax.swing.JButton viewProductDetailsJButton;
    // End of variables declaration//GEN-END:variables
}
